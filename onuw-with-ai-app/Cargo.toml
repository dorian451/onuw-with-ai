[package]
name = "onuw-with-ai"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
onuw-game = { path = "../onuw-game", optional = true }
onuw-agent = { path = "../onuw-agent", optional = true }

axum = { workspace = true, optional = true }
cfg-if.workspace = true
console_error_panic_hook.workspace = true
hashlink.workspace = true
http.workspace = true
fallible-iterator.workspace = true
once_cell.workspace = true
leptos = { workspace = true, features = ["nightly"] }
leptos-use = { workspace = true, optional = true }
leptos_axum = { workspace = true, optional = true }
leptos_meta = { workspace = true, features = ["nightly"] }
leptos_router = { workspace = true, features = ["nightly"] }
serde = { workspace = true, features = ["derive"] }
thiserror.workspace = true
tokio = { workspace = true, optional = true }
tower = { workspace = true, optional = true }
tower-http = { workspace = true, features = ["fs"], optional = true }
tracing = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, features = [
    "env-filter",
], optional = true }
tracing-wasm = { workspace = true, optional = true }
wasm-bindgen.workspace = true

[features]
hydrate = [
    "dep:tracing-wasm",
    "dep:tracing",
    "onuw-game/light",
    "leptos_meta/hydrate",
    "leptos_router/hydrate",
    "leptos-use",
    "leptos/hydrate",
]
ssr = [
    "dep:axum",
    "dep:leptos_axum",
    "dep:onuw-agent",
    "dep:onuw-game",
    "dep:tokio",
    "dep:tower-http",
    "dep:tower",
    "dep:tracing-subscriber",
    "dep:tracing",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "leptos-use/ssr",
    "leptos/ssr",
]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
# output-name = "onuw-with-ai"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"

tailwind-input-file = "style/tailwind.css"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
# end2end-cmd = "npx playwright test"
# end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
